version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: lineage-postgres
    environment:
      POSTGRES_DB: lineage_extractor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: lineage123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lineage_extractor"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lineage-network

  backend:
    build: .
    container_name: lineage-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/lineage_extractor
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=lineage123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - GROQ_API_KEY=${GROQ_API_KEY:-your-groq-api-key}
      - GITHUB_TOKEN=${GITHUB_TOKEN:-your-github-token}
      - DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME:-qupid-lineage}
      - DOCKER_BACKEND_URL=http://backend:8080/api
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/extraction/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - lineage-network

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lineage-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lineage.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - lineage-network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local

networks:
  lineage-network:
    driver: bridge
